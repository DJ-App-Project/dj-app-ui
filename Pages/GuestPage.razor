@page "/guestpage"
@using Dj.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container my-4">
    <div class="card shadow-lg p-4 rounded-3">
        <h2 class="text-center mb-4">Izberi dogodek</h2>

        <div class="mb-4">
            <select class="form-select" @onchange="OnEventChange">
                <option value="">Izberi dogodek...</option>
                @foreach (var ev in Events)
                {
                    <option value="@ev.ObjectId">@ev.Name</option>
                }
            </select>
        </div>

        <h4 class="mt-5">Predlagaj svojo pesem 🎵</h4>
        <div class="row g-3">
            <div class="col-md-6">
                <input class="form-control" @bind="newSongName" placeholder="Naslov pesmi" />
            </div>
            <div class="col-md-6">
                <input class="form-control" @bind="newSongArtist" placeholder="Izvajalec" />
            </div>
        </div>
        <button class="btn btn-primary mt-3" @onclick="AddSong">Dodaj predlog</button>

        <h4 class="mt-5">Leaderboard 🎧</h4>
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>#</th>
                    <th>Pesem</th>
                    <th>Izvajalec</th>
                    <th>Točke</th>
                    <th>Glasuj</th>
                </tr>
            </thead>
            <tbody>
                @if (Songs != null)
                {
                    int rank = 1;
                    @foreach (var song in Songs.OrderByDescending(s => s.Votes))
                    {
                        <tr>
                            <td>@rank</td>
                            <td>@song.MusicName</td>
                            <td>@song.MusicArtist</td>
                            <td>@song.Votes</td>
                            <td><button class="btn btn-success btn-sm" @onclick="() => VoteForSong(song)">Glasuj 👍</button></td>
                        </tr>
                        rank++;
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<DJEvent> Events = new();
    private List<Music> Songs = new();
    private string selectedEventId;

    private string newSongName;
    private string newSongArtist;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        Events = await Http.GetFromJsonAsync<List<DJEvent>>("AllEvents?page=1&pageSize=50") ?? new();
    }

    private async Task OnEventChange(ChangeEventArgs e)
    {
        selectedEventId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedEventId))
        {
            Songs = await Http.GetFromJsonAsync<List<Music>>($"Music/{selectedEventId}") ?? new();
        }
        else
        {
            Songs = new();
        }
    }

    private async Task VoteForSong(Music song)
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        var requestData = new
        {
            musicName = song.MusicName,
            musicArtist = song.MusicArtist
        };

        var request = new HttpRequestMessage(HttpMethod.Post, $"api/event/VoteForEventSong/{selectedEventId}")
            {
                Content = JsonContent.Create(requestData)
            };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            await OnEventChange(new ChangeEventArgs { Value = selectedEventId });
        }
        else
        {
            Console.WriteLine("Napaka pri glasovanju za pesem.");
        }
    }

    private async Task AddSong()
    {
        if (!string.IsNullOrWhiteSpace(newSongName) && !string.IsNullOrWhiteSpace(newSongArtist))
        {
            var songData = new
            {
                EvendId = selectedEventId,
                MusicName = newSongName,
                MusicArtist = newSongArtist,
                MusicGenre = "",
                Visible = true
            };

            var request = new HttpRequestMessage(HttpMethod.Post, "AddMusicToEvent")
                {
                    Content = JsonContent.Create(songData)
                };
            var token = await LocalStorage.GetItemAsync<string>("token");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                newSongName = "";
                newSongArtist = "";
                await OnEventChange(new ChangeEventArgs { Value = selectedEventId });
            }
            else
            {
                Console.WriteLine("Napaka pri dodajanju pesmi.");
            }
        }
    }
}